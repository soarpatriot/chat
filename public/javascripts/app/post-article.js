// Generated by CoffeeScript 1.6.3
/*
  this is used for user post one article
*/


(function() {
  require.config({
    baseUrl: '/javascripts',
    shim: {
      'bootstrap': {
        deps: ['jquery']
      },
      'underscore': {
        exports: '_'
      },
      'Showdown': {
        exports: 'Showdown'
      },
      'chosen': {
        exports: 'chosen'
      },
      'area': {
        exports: 'area'
      },
      'backbone': {
        deps: ['underscore', 'jquery'],
        exports: 'Backbone'
      }
    },
    paths: {
      'jquery': 'jquery-1.9.1.min',
      'bootstrap': 'bootstrap.min',
      'Showdown': 'showdown',
      'chosen': 'chosen.jquery.min',
      'select2': 'select2',
      'jqBootstrapValidation': 'jqBootstrapValidation-1.3.7.min',
      'area': 'app/area',
      'underscore': 'underscore',
      'backbone': 'backbone',
      'load-image': 'fileupload/load-image.min',
      'load-image-exif': 'fileupload/load-image-exif',
      'load-image-ios': 'fileupload/load-image-ios',
      'load-image-meta': 'fileupload/load-image-meta',
      'canvas-to-blob': 'fileupload/canvas-to-blob',
      'jquery.fileupload-validate': 'fileupload/jquery.fileupload-validate',
      'jquery.fileupload-process': 'fileupload/jquery.fileupload-process',
      'jquery.fileupload-image': 'fileupload/jquery.fileupload-image',
      'jquery.iframe-transport': 'fileupload/jquery.iframe-transport',
      'jquery.ui.widget': 'fileupload/vendor/jquery.ui.widget',
      'jquery.fileupload': 'fileupload/jquery.fileupload'
    }
  });

  require(['jquery', 'Showdown', 'underscore', 'area', 'backbone', 'load-image', 'bootstrap', 'chosen', 'select2', 'jqBootstrapValidation', 'jquery.iframe-transport', 'jquery.fileupload', 'jquery.fileupload-validate'], function($, Showdown, _, Area, Backbone, loadImage) {
    var Image, ImageUploadView, converter, countries, initTip, obtainFileInfo, _ref;
    $("#tag-select").select2();
    initTip = function(id) {
      var tagId;
      tagId = $("#" + id).val();
      if (tagId) {
        return $("#" + tagId).removeClass('hidden');
      }
    };
    initTip("tag-select");
    $("#tag-select").on("select2-close", function() {
      $("#tag-desc-div div").addClass('hidden');
      return initTip("tag-select");
    });
    countries = _.map(Area, function(places, key) {
      return places;
    });
    $("#country-input").select2({
      placeholder: "选择国家",
      data: countries
    });
    $("#country-input").on("select2-close", function() {
      var country, provinces;
      $("#province-div").addClass('hidden');
      $("#province-input").select2("enable", false);
      $("#district-div").addClass('hidden');
      $("#district-input").select2("enable", false);
      $("#county-div").addClass('hidden');
      $("#county-input").select2("enable", false);
      country = $(this).val();
      if (country) {
        $("#country-text").val(Area[country].text);
        provinces = _.map(Area[country].places, function(places, key) {
          return places;
        });
      }
      if (provinces && provinces.length > 0) {
        $("#province-input").select2("enable", true);
        $("#province-input").select2({
          placeholder: "择省份，直辖市",
          data: provinces
        });
        return $("#province-div").removeClass('hidden');
      }
    });
    $("#province-input").on("select2-close", function() {
      var country, districts, districtsMap, province, provinceObj, provinceText;
      $("#district-div").addClass('hidden');
      $("#county-div").addClass('hidden');
      $("#county-input").select2("enable", false);
      $("#district-input").select2("enable", false);
      country = $("#country-input").val();
      province = $(this).val();
      if (country && province) {
        provinceObj = Area[country]["places"][province];
        districtsMap = provinceObj["places"];
        provinceText = provinceObj["text"];
        $("#province-text").val(provinceText);
        districts = _.map(districtsMap, function(places, key) {
          return places;
        });
      }
      if (districts && districts.length > 0) {
        $("#district-input").select2("enable", true);
        $("#district-input").select2({
          placeholder: "选择市,区",
          data: districts
        });
        return $("#district-div").removeClass('hidden');
      }
    });
    $("#district-input").on("select2-close", function() {
      var counties, country, countyMap, district, districtObj, districtText, province;
      $("#county-div").addClass('hidden');
      $("#county-input").select2("enable", false);
      country = $("#country-input").val();
      province = $("#province-input").val();
      district = $(this).val();
      if (country && province && district) {
        districtObj = Area[country]["places"][province]["places"][district];
        countyMap = districtObj["places"];
        districtText = districtObj["text"];
        $("#district-text").val(districtText);
        counties = _.map(countyMap, function(places, key) {
          return places;
        });
      }
      if (counties && counties.length > 0) {
        $("#county-input").select2("enable", true);
        $("#county-input").select2({
          placeholder: "选择县",
          data: counties
        });
        return $("#county-div").removeClass('hidden');
      }
    });
    $("#county-input").on("select2-close", function() {
      var country, countryText, county, district, province;
      country = $("#country-input").val();
      province = $("#province-input").val();
      district = $("#district-input").val();
      county = $(this).val();
      if (country && province && district && county) {
        countryText = Area[country]["places"][province]["places"][district]["places"][county]["text"];
        return $("#county-text").val(countryText);
      }
    });
    $("input,select,textarea").not("[type=submit]").jqBootstrapValidation();
    converter = new Showdown.converter();
    $("#editor-area").keyup(function() {
      var html, txt;
      txt = $("#editor-area").val();
      html = converter.makeHtml(txt);
      return $("#preview-content").html(html);
      /*
       $("#preview-content").html(html.replace(/>/g, ">\n").replace(/</g, "\n<").replace(/\n{2,}/g, "\n\n"))
      */

    });
    /*
      upload images file
    */

    Image = Backbone.Model.extend({});
    ImageUploadView = Backbone.View.extend({
      tagName: 'div',
      template: _.template($('#image-item-template').html()),
      events: {
        "click a[name='cancel']": "cancel",
        "click a[name='delete']": "delete"
      },
      initialize: function() {
        /*
        */

        var fileInfo;
        fileInfo = this._obtainFileInfo(this.model);
        console.log('init: ' + fileInfo);
        return this.$el.html(this.template(fileInfo));
      },
      render: function() {
        var loadingImage, that;
        this.$imageArea = this.$('.thumb');
        that = this;
        loadingImage = loadImage(this.model, function(img) {
          var $image;
          $image = $(img);
          $image.addClass('img-responsive').addClass('img-thumbnail');
          return that.$imageArea.append($image);
        }, {
          maxWidth: 140,
          maxHeight: 140,
          canvas: true
        });
        return this;
      },
      cancel: function() {},
      "delete": function() {},
      updateProcess: function() {},
      load: function(file) {
        var loadingImage;
        loadingImage = loadImage(file, function(img) {
          var $image;
          $image = $(img);
          $image.addClass('img-responsive').addClass('img-thumbnail');
          return this.$imageArea.append($image);
        }, {
          maxWidth: 140,
          maxHeight: 140,
          canvas: true
        });
        return this.render;
      },
      _obtainFileInfo: function(file) {
        var fileInfo, kbSize, size, sizeText;
        size = file.size;
        kbSize = size / 1024;
        sizeText = kbSize / 1024 > 0 ? (kbSize / 1024).toFixed(2) + ' MB' : kbSize.toFixed(2) + ' KB';
        return fileInfo = {
          name: file.name,
          size: sizeText
        };
      }
    });
    obtainFileInfo = function(file) {
      var fileInfo, kbSize, size, sizeText;
      size = file.size;
      kbSize = size / 1024;
      sizeText = kbSize / 1024 > 0 ? (kbSize / 1024).toFixed(2) + ' MB' : kbSize.toFixed(2) + ' KB';
      return fileInfo = {
        name: file.name,
        size: sizeText
      };
    };
    console.log('fileupload');
    return $('#fileupload').fileupload({
      url: '//localhost:8888/upload',
      dropZone: $('#dropzone'),
      dataType: 'json',
      autoUpload: true,
      acceptFileTypes: /(\.|\/)(gif|jpg|jpeg|png)$/i,
      maxFileSize: 5000000,
      disableImageResize: /Android(?!.*Chrome)|Opera/.test(window.navigator.userAgent),
      previewMaxWidth: 140,
      previewMaxHeight: 140,
      previewCrop: true
    }).on('fileuploadadd', function(e, data) {
      var $this, options, that;
      console.log('fileuploadadd');
      $this = $(this);
      that = $this.data('blueimp-fileupload') || $this.data('fileupload');
      options = that.options;
      return data.process(function() {
        return $this.fileupload('process', data);
      }).always(function() {}).done(function() {
        console.log('ff');
        return _.each(data.files, function(file) {
          var fileInfo, imageView;
          console.log('file: ' + JSON.stringify(file));
          fileInfo = obtainFileInfo(file);
          console.log('fileInfo: ' + JSON.stringify(fileInfo));
          imageView = new ImageUploadView({
            model: file
          });
          return $('#image-area').append(imageView.render().el);
        });
      }).fail(function() {
        console.log('fail');
        if (data.files.error) {
          return console.log(data.files[0].error);
        }
      });
    }).on('fileuploadfail', function(e, data) {
      console.log('fileuploadfail');
      return $('#tip-area').empty();
    }).prop('disabled', !$.support.fileInput).parent().addClass((_ref = $.support.fileInput) != null ? _ref : {
      undefined: 'disabled'
    });
  });

}).call(this);
